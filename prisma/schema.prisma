
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  columnId    Int?        @map("column_id")
  column      TaskColumn? @relation(fields: [columnId], references: [id], onDelete: Cascade)
  order       Int        @default(0)

  archivedAt DateTime? @db.Timestamptz @map("archived_at")
  createdAt DateTime @default(now()) @db.Timestamptz @map("created_at")
  updatedAt DateTime @updatedAt @db.Timestamp @map("updated_at")

  @@map("task")
}

model TaskColumn {
  id    Int    @id @default(autoincrement())
  name  String
  color String
  order Int    @default(0)

  tasks  Task[]

userId String @map("user_id")
user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz @map("created_at")
  updatedAt DateTime @updatedAt @db.Timestamp @map("updated_at")

  @@map("task_column")
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  projectCards ProjectCard[]

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz @map("created_at")
  updatedAt DateTime @updatedAt @db.Timestamp @map("updated_at")

  @@map("project")
}

model ProjectCard {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?

  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz @map("created_at")
  updatedAt DateTime @updatedAt @db.Timestamp @map("updated_at")

  @@map("project_card")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  taskColumns   TaskColumn[]
  projects      Project[]
  
  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
